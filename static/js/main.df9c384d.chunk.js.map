{"version":3,"sources":["Containers/Card.js","Containers/CardList.js","Containers/SearchBox.js","Containers/Scroll.js","Components/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAgBeA,EAbF,SAACC,GAAW,IACjBC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAClB,OACC,sBAAKC,UAAY,sDAAjB,UACC,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,gCACC,6BAAKL,IACL,4BAAIC,WCaOK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,8BAEEA,EAAOC,KAAI,SAACC,EAAKC,GAEhB,OACA,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKKC,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,qBAAKT,UAAU,MAAf,SACC,uBACSA,UAAY,sCACrBU,KAAK,SACLC,YAAY,gBACZC,SAAYH,OCAAI,EAPA,SAACjB,GACf,OACC,qBAAKkB,MAAS,CAAEC,SAAW,SAAUC,OAAS,kBAAmBC,OAAS,SAA1E,SACErB,EAAMsB,YC2CKC,G,wDAzCd,aAAc,IAAD,8BACZ,gBAeDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAcF,EAAMG,OAAOC,SAf1C,EAAKC,MAAQ,CACZtB,OAAQ,GACRmB,YAAc,IAJH,E,gEAOQ,IAAD,OACnBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAClB,OAAS2B,S,+BAS7B,IAAD,EACoBC,KAAKN,MAA3BtB,EADE,EACFA,OAAOmB,EADL,EACKA,YACRU,EAAiB7B,EAAO8B,QAAO,SAAAC,GACpC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASd,EAAYa,kBAEtD,OAAKhC,EAAOkC,OAIV,sBAAKtC,UAAY,KAAjB,UACI,oBAAIA,UAAY,KAAhB,yBACA,cAAC,EAAD,CAAWS,aAAgBuB,KAAKZ,iBACnC,cAAC,EAAD,UACC,cAAC,EAAD,CAAUhB,OAAQ6B,SAPd,oD,GA1BQM,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UAAkB,cAAC,EAAD,MAA2BC,SAASC,eAAe,SAIvEZ,M","file":"static/js/main.df9c384d.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = (props) => {\n\tconst {name,email,id} = props;\n\treturn (\n\t\t<div className = \"tc bg-light-green dib br3 ma2 pa3 grow bw2 shadow-5\">\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"Robot\"/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user,i) => \n\t          {\n\t\t\t\t return (\n\t\t\t\t <Card \n\t\t\t\t key={i} \n\t\t\t\t id={robots[i].id} \n\t\t\t\t name={robots[i].name} \n\t\t\t\t email={robots[i].email}\n\t\t\t\t />\n\t\t\t\t);  \n\t          })\n\t\t\t}\n\t\t</div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\n            className = \"tc pa3 ba b--green bg-lightest-blue\"\n\t\t\ttype=\"search\" \n\t\t\tplaceholder=\"Search Robots\" \n\t\t\tonChange = {searchChange}\n\t\t\t/>\n\t\t</div>\n\n);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style = {{ overflow : 'scroll', border : '5px solid black', height : '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\nexport default Scroll;","import React,{Component} from 'react';\nimport CardList from \"../Containers/CardList\";\nimport SearchBox from '../Containers/SearchBox.js';\nimport Scroll from '../Containers/Scroll.js';\nimport \"./App.css\";\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield : ''\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users') \n\t\t.then(response => response.json())\n\t\t.then(users => this.setState({robots : users})\n\t    );\n\n\t}\n\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield : event.target.value});\n\t}\n\trender () {\n\t\tconst {robots,searchfield} = this.state;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\t\tif (!robots.length) {\n\t\t\treturn <h1>Loading Robots</h1> }\n\t\telse {\n\t\t\treturn (\n\t\t\t\t<div className = \"tc\">\n\t\t\t\t    <h1 className = \"f1\">RoboFriends</h1>\n\t\t\t\t    <SearchBox searchChange = {this.onSearchChange}/>\t\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t        );\n\t    }\n\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode><App /></React.StrictMode>,document.getElementById('root'));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}